{"version":3,"file":"convertGraphToStats.js","sourceRoot":"","sources":["../../../src/metro/convertGraphToStats.ts"],"names":[],"mappings":"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","sourcesContent":["import { type SerializerConfigT } from 'metro-config';\nimport path from 'path';\n\ntype CustomSerializerParameters = Parameters<NonNullable<SerializerConfigT['customSerializer']>>;\ntype ConvertOptions = {\n  projectRoot: string;\n  entryPoint: CustomSerializerParameters[0];\n  preModules: CustomSerializerParameters[1];\n  graph: CustomSerializerParameters[2];\n  options: CustomSerializerParameters[3];\n};\n\nexport type MetroStatsEntry = ReturnType<typeof convertGraphToStats>;\nexport type MetroStatsModule = ReturnType<typeof convertModule>\n\nexport function convertGraphToStats({ projectRoot, entryPoint, preModules, graph, options }: ConvertOptions) {\n  return {\n    projectRoot,\n    entryPoint,\n    platform: graph.transformOptions.platform ?? 'unknown',\n    preModules: preModules.map((module) => convertModule(projectRoot, graph, module)),\n    graph: convertGraph(projectRoot, graph),\n    options: convertOptions(options),\n  };\n}\n\nfunction convertOptions(options: ConvertOptions['options']) {\n  return {\n    ...options,\n    processModuleFilter: undefined,\n    createModuleId: undefined,\n    getRunModuleStatement: undefined,\n    shouldAddToIgnoreList: undefined,\n  };\n}\n\nfunction convertGraph(projectRoot: string, graph: ConvertOptions['graph']) {\n  return {\n    ...graph,\n    entryPoints: Array.from(graph.entryPoints.values()),\n    dependencies: Array.from(graph.dependencies.values()).map((dependency) => (\n      convertModule(projectRoot, graph, dependency)\n    )),\n  };\n}\n\nfunction convertModule(projectRoot: string, graph: ConvertOptions['graph'], module: ConvertOptions['preModules'][0]) {\n  const nodeModuleName = getNodeModuleNameFromPath(module.path);\n  const isTextFile = ['.js', '.mjs', '.cjs', '.ts', '.jsx', '.tsx', '.json'].includes(path.extname(module.path));\n\n  return {\n    nodeModuleName: nodeModuleName || '[unknown]',\n    isNodeModule: !!nodeModuleName,\n    relativePath: path.relative(projectRoot, module.path),\n    absolutePath: module.path,\n    size: getModuleOutputInBytes(module),\n    dependencies: Array.from(module.dependencies.values()).map((dependency) => (\n      path.relative(projectRoot, dependency.absolutePath)\n    )),\n    inverseDependencies: Array.from(module.inverseDependencies)\n      .filter((dependencyPath) => graph.dependencies.has(dependencyPath))\n      .map((dependencyPath) => ({\n        relativePath: path.relative(projectRoot, dependencyPath),\n        absolutePath: dependencyPath,\n      })),\n\n    source: isTextFile ? module.getSource().toString('utf-8') : '[binary file]',\n    output: module.output.map((output) => ({\n      type: output.type,\n      data: { code: output.data.code }, // Avoid adding source maps, this is too big for json\n    })),\n  };\n}\n\nfunction getModuleOutputInBytes(module: ConvertOptions['preModules'][0]) {\n  return module.output.reduce((bytes, module) => bytes + Buffer.byteLength(module.data.code, 'utf-8'), 0);\n}\n\nconst nodeModuleNameCache = new Map<string, string>();\nfunction getNodeModuleNameFromPath(path: string) {\n  if (nodeModuleNameCache.has(path)) {\n    return nodeModuleNameCache.get(path) ?? null;\n  }\n\n  const segments = path.split('/');\n\n  for (let i = segments.length - 1; i >= 0; i--) {\n    if (segments[i] === 'node_modules') {\n      let name = segments[i + 1];\n\n      if (name.startsWith('@') && i + 2 < segments.length) {\n        name += '/' + segments[i + 2];\n      }\n\n      nodeModuleNameCache.set(path, name);\n      return name;\n    }\n  }\n\n  return null;\n}\n"]}