{"version":3,"file":"serializeStatsFile.js","sourceRoot":"","sources":["../../../src/metro/serializeStatsFile.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAoB;AACpB,8CAAwB;AAGxB,mDAAmD;AACnD,oCAAmC;AACnC,sCAAkE;AAIlE,mDAAmD;AACnD,SAAgB,YAAY,CAAC,WAAmB;IAC9C,OAAO,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;AACpD,CAAC;AAFD,oCAEC;AAED,0FAA0F;AAC1F,SAAgB,eAAe;IAC7B,OAAO,EAAE,IAAI,qBAAA,EAAE,OAAO,wBAAA,EAAE,CAAC;AAC3B,CAAC;AAFD,0CAEC;AAED,yEAAyE;AACzE,SAAsB,iBAAiB,CAAC,SAAiB,EAAE,QAA4B;IAA5B,yBAAA,EAAA,WAAW,eAAe,EAAE;;;;;;oBACrF,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;wBAC7B,MAAM,IAAI,KAAK,CAAC,uBAAe,SAAS,kBAAc,CAAC,CAAC;qBACzD;oBAED,IAAI,SAAG,CAAC,wBAAwB,EAAE;wBAChC,sBAAO;qBACR;oBAEY,qBAAM,IAAA,oBAAa,EAAC,SAAS,CAAC,EAAA;;oBAArC,IAAI,GAAG,SAA8B;oBACrC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBAE1C,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,OAAO,EAAE;wBACpE,MAAM,IAAI,KAAK,CAAC,uBAAe,SAAS,wDAAoD,CAAC,CAAC;qBAC/F;;;;;CACF;AAfD,8CAeC;AAED;;;GAGG;AACH,SAAsB,eAAe,CAAC,WAAmB;;;;;;oBACjD,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;yBAEvC,YAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAvB,wBAAuB;;;;oBAEvB,qBAAM,iBAAiB,CAAC,QAAQ,CAAC,EAAA;;oBAAjC,SAAiC,CAAC;;;;oBAElC,qBAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,GAAG,IAAI,CAAC,EAAA;;oBAA/E,SAA+E,CAAC;;wBAGlF,sBAAO;wBAGT,qBAAM,YAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAA;;oBAApE,SAAoE,CAAC;oBACrE,qBAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,GAAG,IAAI,CAAC,EAAA;;oBAA/E,SAA+E,CAAC;;;;;CACjF;AAfD,0CAeC;AAED,IAAM,UAAU,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;AAErC;;;GAGG;AACH,SAAsB,aAAa,CAAC,WAAmB,EAAE,KAAsB;;;;;;oBACvE,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;wBAC3B,KAAK,CAAC,QAAQ;wBACd,KAAK,CAAC,WAAW;wBACjB,KAAK,CAAC,UAAU;wBAChB,KAAK,CAAC,UAAU;wBAChB,KAAK,CAAC,KAAK;wBACX,KAAK,CAAC,OAAO;qBACd,CAAC,CAAC;oBAEH,qBAAM,UAAU,CAAC,IAAI,CAAC,cAAM,OAAA,YAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,UAAG,KAAK,OAAI,CAAC,EAA/D,CAA+D,CAAC,EAAA;;oBAA5F,SAA4F,CAAC;;;;;CAC9F;AAXD,sCAWC;AAED;;;GAGG;AACH,SAAsB,gBAAgB,CAAC,SAAiB;;;;;;oBAChD,aAAa,GAAG,iCAAiC,CAAC;oBAClD,OAAO,GAMP,EAAE,CAAC;oBAET,qBAAM,IAAA,eAAQ,EAAC,SAAS,EAAE,UAAC,KAAK,EAAE,IAAI;;4BACpC,IAAI,KAAK,KAAK,CAAC;gCAAE,OAAO;4BAElB,IAAA,KAAyC,MAAA,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,mCAAI,EAAE,EAAvE,CAAC,QAAA,EAAE,QAAQ,QAAA,EAAE,WAAW,QAAA,EAAE,UAAU,QAAmC,CAAC;4BAC/E,IAAI,QAAQ,IAAI,WAAW,IAAI,UAAU,EAAE;gCACzC,OAAO,CAAC,IAAI,CAAC;oCACX,EAAE,EAAE,KAAK;oCACT,QAAQ,EAAE,QAAe;oCACzB,WAAW,aAAA;oCACX,YAAY,EAAE,UAAU;oCACxB,YAAY,EAAE,cAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAU,CAAC;iCACrD,CAAC,CAAC;6BACJ;wBACH,CAAC,CAAC,EAAA;;oBAbF,SAaE,CAAC;oBAEH,sBAAO,OAAO,EAAC;;;;CAChB;AA1BD,4CA0BC;AAED;;GAEG;AACH,SAAsB,aAAa,CAAC,SAAiB,EAAE,EAAU;;;;;wBAClD,qBAAM,IAAA,eAAQ,EAAC,SAAS,EAAE,EAAE,CAAC,EAAA;;oBAApC,IAAI,GAAG,SAA6B;oBAC1C,IAAI,CAAC,IAAI,EAAE;wBACT,MAAM,IAAI,KAAK,CAAC,wBAAgB,EAAE,kBAAc,CAAC,CAAC;qBACnD;oBAEK,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAC9B,sBAAO;4BACL,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;4BACjB,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;4BACpB,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;4BACnB,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;4BACnB,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;4BACd,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;yBACjB,EAAC;;;;CACH;AAfD,sCAeC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { type MetroStatsEntry } from './convertGraphToStats';\nimport { name, version } from '../../package.json';\nimport { env } from '../utils/env';\nimport { mapLines, readFirstLine, readLine } from '../utils/file';\n\nexport type StatsMetadata = { name: string; version: string };\n\n/** The default location of the metro stats file */\nexport function getStatsPath(projectRoot: string) {\n  return path.join(projectRoot, '.expo/stats.json');\n}\n\n/** The information to validate if a stats file is compatible with this library version */\nexport function getStatsMetdata(): StatsMetadata {\n  return { name, version };\n}\n\n/** Validate if the stats file is compatible with this library version */\nexport async function validateStatsFile(statsFile: string, metadata = getStatsMetdata()) {\n  if (!fs.existsSync(statsFile)) {\n    throw new Error(`Stats file \"${statsFile}\" not found.`);\n  }\n\n  if (env.EXPO_NO_STATS_VALIDATION) {\n    return;\n  }\n\n  const line = await readFirstLine(statsFile);\n  const data = line ? JSON.parse(line) : {};\n\n  if (data.name !== metadata.name || data.version !== metadata.version) {\n    throw new Error(`Stats file \"${statsFile}\" is incompatible with this version of the plugin.`);\n  }\n}\n\n/**\n * Create or overwrite the stats file with basic metadata.\n * This metdata is used by the API to determine version compatibility.\n */\nexport async function createStatsFile(projectRoot: string) {\n  const filePath = getStatsPath(projectRoot);\n\n  if (fs.existsSync(filePath)) {\n    try {\n      await validateStatsFile(filePath);\n    } catch (error) {\n      await fs.promises.writeFile(filePath, JSON.stringify(getStatsMetdata()) + '\\n');\n    }\n\n    return;\n  }\n\n  await fs.promises.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.promises.writeFile(filePath, JSON.stringify(getStatsMetdata()) + '\\n');\n}\n\nconst writeQueue = Promise.resolve();\n\n/**\n * Add a new stats entry to the stats file.\n * This is appended on a new line, so we can load the stats selectively.\n */\nexport async function addStatsEntry(projectRoot: string, stats: MetroStatsEntry) {\n  const entry = JSON.stringify([\n    stats.platform,\n    stats.projectRoot,\n    stats.entryPoint,\n    stats.preModules,\n    stats.graph,\n    stats.options,\n  ]);\n\n  await writeQueue.then(() => fs.promises.appendFile(getStatsPath(projectRoot), `${entry}\\n`));\n}\n\n/**\n * List all stats entries without parsing the data.\n * This only reads the bundle name, and adds a line number as ID.\n */\nexport async function listStatsEntries(statsFile: string) {\n  const bundlePattern = /^\\[\"([^\"]+)\",\"([^\"]+)\",\"([^\"]+)/;\n  const entries: {\n    id: number;\n    absolutePath: string;\n    relativePath: string;\n    projectRoot: string;\n    platform: 'android' | 'ios' | 'web';\n  }[] = [];\n\n  await mapLines(statsFile, (index, line) => {\n    if (index === 1) return;\n\n    const [_, platform, projectRoot, entryPoint] = line.match(bundlePattern) ?? [];\n    if (platform && projectRoot && entryPoint) {\n      entries.push({\n        id: index,\n        platform: platform as any,\n        projectRoot,\n        absolutePath: entryPoint,\n        relativePath: path.relative(projectRoot, entryPoint),\n      });\n    }\n  });\n\n  return entries;\n}\n\n/**\n * Get the stats entry by id or line number, and parse the data.\n */\nexport async function getStatsEntry(statsFile: string, id: number): Promise<MetroStatsEntry> {\n  const line = await readLine(statsFile, id);\n  if (!line) {\n    throw new Error(`Stats entry \"${id}\" not found.`);\n  }\n\n  const list = JSON.parse(line);\n  return {\n    platform: list[0],\n    projectRoot: list[1],\n    entryPoint: list[2],\n    preModules: list[3],\n    graph: list[4],\n    options: list[5],\n  };\n}\n"]}