{"version":3,"file":"resolveOptions.js","sourceRoot":"","sources":["../../../src/cli/resolveOptions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAoB;AACpB,8CAAwB;AAExB,kEAA2D;AAE3D,kEAAgE;AAChE,sCAA4C;AAI5C,SAAsB,cAAc,CAAC,KAAY;;;;;wBACrB,qBAAM,OAAO,CAAC,GAAG,CAAC;wBAC1C,gBAAgB,CAAC,KAAK,CAAC;wBACvB,WAAW,CAAC,KAAK,CAAC;qBACnB,CAAC,EAAA;;oBAHI,KAAoB,SAGxB,EAHK,SAAS,QAAA,EAAE,IAAI,QAAA;oBAKtB,sBAAO,EAAE,SAAS,WAAA,EAAE,IAAI,MAAA,EAAE,EAAC;;;;CAC5B;AAPD,wCAOC;AAED,SAAe,gBAAgB,CAAC,KAAY;;;;;;;oBACpC,SAAS,GAAG,MAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,mCAAI,IAAA,iCAAY,EAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;oBAE5D,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;wBAC7B,MAAM,IAAI,KAAK,CAAC,sCAA8B,SAAS,QAAI,CAAC,CAAC;qBAC9D;;;;oBAGC,qBAAM,IAAA,sCAAiB,EAAC,SAAS,CAAC,EAAA;;oBAAlC,SAAkC,CAAC;;;;oBAEnC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;wBAGnE,sBAAO,cAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC;;;;CAChC;AAED,SAAe,WAAW,CAAC,KAA4B;;;;;;;gCAC9C,KAAK,CAAC,QAAQ,CAAC;;;wBAAI,qBAAM,IAAA,kBAAW,EAAC,IAAI,CAAC,EAAA;;oBAAvB,KAAA,SAAuB,CAAA;;wBAAjD,0BAAkD;;;;CACnD","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { getStatsPath } from '../metro/serializeStatsFile';\nimport { type Input } from './bin';\nimport { validateStatsFile } from '../metro/serializeStatsFile';\nimport { getFreePort } from '../utils/port';\n\nexport type Options = Awaited<ReturnType<typeof resolveOptions>>;\n\nexport async function resolveOptions(input: Input) {\n  const [statsFile, port] = await Promise.all([\n    resolveStatsFile(input),\n    resolvePort(input),\n  ]);\n\n  return { statsFile, port };\n}\n\nasync function resolveStatsFile(input: Input) {\n  const statsFile = input._[0] ?? getStatsPath(process.cwd());\n\n  if (!fs.existsSync(statsFile)) {\n    throw new Error(`Could not find stats file \"${statsFile}\".`);\n  }\n\n  try {\n    await validateStatsFile(statsFile);\n  } catch (error) {\n    throw new Error(`Stats file is incompatible with this version.`);\n  }\n\n  return path.resolve(statsFile);\n}\n\nasync function resolvePort(input: Pick<Input, '--port'>) {\n  return input['--port'] ?? await getFreePort(3000);\n}\n"]}