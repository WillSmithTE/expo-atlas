{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../src/utils/file.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAA4B;AAC5B,0CAAoB;AACpB,sDAAgC;AAEhC,SAAsB,aAAa,CAAC,QAAgB;;;;;;oBAC5C,MAAM,GAAG,YAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBACvC,MAAM,GAAG,kBAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;oBACrD,QAAQ,GAAG,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;wBACnD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAI;4BACrB,MAAM,CAAC,KAAK,EAAE,CAAC;4BACf,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,QAAQ,CAAC,OAAO,CAAC,cAAM,OAAA,MAAM,CAAC,KAAK,EAAE,EAAd,CAAc,CAAC,CAAC;oBAEhC,qBAAM,QAAQ,EAAA;wBAArB,sBAAO,SAAc,EAAC;;;;CACvB;AAdD,sCAcC;AAED,SAAsB,QAAQ,CAAC,QAAgB,EAAE,QAAiD;;;;;;oBAC1F,MAAM,GAAG,YAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBACvC,MAAM,GAAG,kBAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;oBACvD,UAAU,GAAG,CAAC,CAAC;oBAEnB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAK;wBACvB,MAAM,KAAK,CAAC;oBACd,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,QAAQ;wBACzB,QAAQ,CAAC,UAAU,EAAE,EAAE,QAAQ,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC;oBAEH,qBAAM,gBAAM,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,EAAA;;oBAAlC,SAAkC,CAAC;;;;;CACpC;AAdD,4BAcC;AAED,SAAsB,QAAQ,CAAC,QAAgB,EAAE,IAAY;;;;;;oBACrD,MAAM,GAAG,YAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBACvC,MAAM,GAAG,kBAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;oBACvD,UAAU,GAAG,CAAC,CAAC;oBAEb,QAAQ,GAAG,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;wBACnD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,QAAQ;4BACzB,IAAI,UAAU,EAAE,KAAK,IAAI,EAAE;gCACzB,MAAM,CAAC,KAAK,EAAE,CAAC;gCACf,OAAO,CAAC,QAAQ,CAAC,CAAC;6BACnB;wBACH,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,QAAQ,CAAC,OAAO,CAAC,cAAM,OAAA,MAAM,CAAC,KAAK,EAAE,EAAd,CAAc,CAAC,CAAC;oBAEhC,qBAAM,QAAQ,EAAA;wBAArB,sBAAO,SAAc,EAAC;;;;CACvB;AAlBD,4BAkBC","sourcesContent":["import events from 'events';\nimport fs from 'fs';\nimport readline from 'readline';\n\nexport async function readFirstLine(filePath: string) {\n  const stream = fs.createReadStream(filePath);\n  const reader = readline.createInterface({ input: stream });\n  const contents = new Promise<string>((resolve, reject) => {\n    reader.on('error', reject);\n    reader.on('line', (line) => {\n      reader.close();\n      resolve(line);\n    });\n  });\n\n  contents.finally(() => stream.close());\n\n  return await contents;\n}\n\nexport async function mapLines(filePath: string, callback: (line: number, contents: string) => any) {\n  const stream = fs.createReadStream(filePath);\n  const reader = readline.createInterface({ input: stream });\n  let lineNumber = 1;\n\n  reader.on('error', (error) => {\n    throw error;\n  });\n\n  reader.on('line', (contents) => {\n    callback(lineNumber++, contents);\n  });\n\n  await events.once(reader, 'close');\n}\n\nexport async function readLine(filePath: string, line: number) {\n  const stream = fs.createReadStream(filePath);\n  const reader = readline.createInterface({ input: stream });\n  let lineNumber = 1;\n\n  const contents = new Promise<string>((resolve, reject) => {\n    reader.on('error', reject); \n    reader.on('line', (contents) => {\n      if (lineNumber++ === line) {\n        reader.close();\n        resolve(contents);\n      }\n    });\n  });\n  \n  contents.finally(() => stream.close());\n\n  return await contents;\n}\n"]}